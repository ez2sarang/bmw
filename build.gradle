plugins {
    id 'java'
    id 'war'
    id 'java-library'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group 'kr.co.fcsoft'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
ext.jpaMetamodelGeneratedDir = "$buildDir/jpa2"

configurations {
    jpaMetamodelGen {
        //delete compile
        extendsFrom
    }

    all*.exclude group: 'javax.jms', module: 'jms'
    all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
    all*.exclude group: 'com.sun.jmx', module: 'jmxri'
    published

    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    compile.extendsFrom provided
}

repositories {
    mavenCentral artifactUrls:
            ["https://repo.maven.apache.org/maven2/"
                                ,"http://repo.spring.io/release"
                                ,"http://repository.jboss.org/nexus/content/groups/public"
                                ,"http://maven.springframework.org/release/"
            ]
    // and optionally...
    /*maven { url "http://repo.spring.io/release" }
    maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
    maven { url 'http://maven.springframework.org/release/' }*/
}

dependencies {
    implementation "org.apache.commons:commons-dbcp2:${commonsDBCPVersion}"
    implementation "org.hibernate:hibernate-core:${hibernateCoreVersion}"
    implementation "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
    implementation "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJPAVersion}"
    jpaMetamodelGen "org.hibernate:hibernate-jpamodelgen:${hibernateJPAModelgenVersion}"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation "org.springframework:spring-aop:${springVersion}"
    implementation "org.springframework:spring-orm:${springVersion}"
    implementation "org.springframework:spring-jdbc:${springVersion}"
    implementation "org.springframework:spring-test:${springVersion}"
    implementation 'org.springframework.data:spring-data-commons:2.3.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.3.7.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat:2.3.7.RELEASE'
    implementation "org.springframework.security:spring-security-core:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-ldap:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-acl:${springSecurityVersion}"
    implementation "io.jsonwebtoken:jjwt:${jwtVersion}"
    implementation "org.apache.tiles:tiles-api:${tilesVersion}"
    implementation "org.apache.tiles:tiles-core:${tilesVersion}"
    implementation "org.apache.tiles:tiles-servlet:${tilesVersion}"
    implementation "org.apache.tiles:tiles-jsp:${tilesVersion}"
    implementation "org.apache.tiles:tiles-compat:${tilesVersion}"
    implementation "org.aspectj:aspectjrt:${aspectJVersion}"
    implementation "org.apache.derby:derbyclient:${apacheDerbyVersion}"
    implementation "mysql:mysql-connector-java:${mySQLVersion}"
    implementation "org.postgresql:postgresql:${postgreSQLVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4JVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4JVersion}"
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "javax.servlet:javax.servlet-api:${javaxServletAPIVersion}"
    implementation "javax.servlet.jsp:javax.servlet.jsp-api:${javaxJspApiVersion}"
    implementation "javax.servlet:jstl:${javaxJSTLVersion}"
    implementation "javax.inject:javax.inject:${javaxInjectVersion}"
    implementation "javax.validation:validation-api:${javaxValidationVersion}"
    implementation "org.dom4j:dom4j:${dom4JVersion}"
    implementation "org.antlr:antlr4:${antlrVersion}"
    implementation "commons-beanutils:commons-beanutils:${commonsBeanUtilsVersion}"
    implementation "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
    implementation "commons-digester:commons-digester:${commonsDigesterVersion}"
    implementation "commons-fileupload:commons-fileupload:${commonsFileUploadVersion}"
    implementation "commons-io:commons-io:${commonsIOVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "commons-logging:commons-logging:${commonsLoggingVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonCoreVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}"
    implementation "org.reflections:reflections:${reflectionsVersion}"
    implementation "com.google.guava:guava:${googleGuavaVersion}"
    implementation 'javax.mail:javax.mail-api:1.5.5'
    implementation 'com.sun.mail:javax.mail:1.5.5'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    implementation 'pull-parser:pull-parser:2.1.10'

    //just test
    implementation 'net.jodah:expiringmap:0.5.10'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'


    //testCompile -> testImplementation
    testImplementation group: 'junit', name: 'junit', version: '4.11'
//    testcompile 'org.junit.jupiter:junit-jupiter-api:5.6.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

//    provided group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            srcDirs jpaMetamodelGeneratedDir
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs 'src/test/resources'
        }
    }
}


processResources() {
    from sourceSets.main.java.srcDirs
    //중복 처리 전략을 명시적으로 지정
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
//    duplicatesStrategy(exclude("**/*.java"))
    //DuplicatesStrategy.INHERIT
    //DuplicatesStrategy.EXCLUDE(['**/*.java'])
    //duplicatesStrategy(EXCLUDE: ['**/*.java'])
    exclude '**/*.java'
}

test {
    useJUnitPlatform()
}

task explodedWar(type: Copy) {
    into "$buildDir/libs/exploded/${war.archiveFileName.get()}"
    with war
}
war.dependsOn explodedWar

idea {
    module {
        sourceDirs += file(jpaMetamodelGeneratedDir)
    }
}

task generateJpaMetamodel(type: JavaCompile) {

    def targetDir = file(jpaMetamodelGeneratedDir)
    def compiledDestinationDir = "$buildDir/tmp/apt-jpa"
    doFirst {
        // 항상 대상 디렉토리를 먼저 비우고 시작해야 한다.
        delete(targetDir)
        targetDir.mkdirs()
    }

    doLast {
        delete(compiledDestinationDir) // UP-TO-DATE 방지
    }

    // -proc:only 는 Annotation Processor로 소스 생성만 한다 컴파일은 하지 않음
    // -s 경로 는 생성된 소스가 들어갈 디렉토리를 뜻한다.
    classpath = configurations.jpaMetamodelGen
    source = sourceSets.main.java
    destinationDir = file(compiledDestinationDir)
    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-s", targetDir.absolutePath,
                    // processor 지정은 안해도 된다. 안하면 모든 어노테이션 프로세서 실행
                    "-processor", "org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor"         ]
    )
}

/**
 plugins {
 id 'org.springframework.boot' version '2.3.2.RELEASE'
 id 'io.spring.dependency-management' version '1.0.9.RELEASE'
 id 'java'
 }

 group = 'com.jaenyeong'
 version = '0.0.1-SNAPSHOT'
 sourceCompatibility = '11'

 repositories {
 mavenCentral()
 }

 dependencies {
 implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
 implementation 'org.springframework.boot:spring-boot-starter-web'
 implementation 'junit:junit:4.12'
 testImplementation('org.springframework.boot:spring-boot-starter-test') {
 exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
 }

 // Spring Security
 implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'

 // Spring Data JPA
 implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'

 // H2 Database
 implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

 // Spring Security Test
 testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.3.3.RELEASE'

 // Thymeleaf extras SpringSecurity5
 implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5'

 // Spring Security Data
 implementation group: 'org.springframework.security', name: 'spring-security-data', version: '5.3.3.RELEASE'
 }

 test {
 useJUnitPlatform()
 }
 */