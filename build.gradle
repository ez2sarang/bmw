group 'org.mariapresso'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
//apply plugin: 'tomcat'
Map warMap = [
        'impd-war': 'impd'
]

sourceCompatibility = 1.7
ext.jpaMetamodelGeneratedDir = "$buildDir/jpa2"

/*
buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
//    configurations.default.exclude(group: 'javax.jms', module: 'jms')
}
apply plugin: "propdeps"
configurations.compile.transitive = false
configurations.provided.transitive = false
configurations.optional.transitive = false
*/


configurations {
    jpaMetamodelGen {
        extendsFrom compile
    }

    all*.exclude group: 'javax.jms', module: 'jms'
    all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
    all*.exclude group: 'com.sun.jmx', module: 'jmxri'
    published

    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    compile.extendsFrom provided
}

repositories {
    mavenCentral()
    // and optionally...
    maven { url "http://repo.spring.io/release" }
    maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
}

// Spring Framework:
def springVersion = '4.2.2.RELEASE'
def springContext = "org.springframework:spring-context:${springVersion}"
def springMVC     = "org.springframework:spring-webmvc:${springVersion}"
def springAOP     = "org.springframework:spring-aop:${springVersion}"
def springORM     = "org.springframework:spring-orm:${springVersion}"
def springJDBC    = "org.springframework:spring-jdbc:${springVersion}"
def springTest    = "org.springframework:spring-test:${springVersion}"


// Spring Security:
def springSecurityVersion = '4.0.1.RELEASE'
def springSecurityCore    = "org.springframework.security:spring-security-core:${springSecurityVersion}"
def springSecurityLDAP    = "org.springframework.security:spring-security-ldap:${springSecurityVersion}"
def springSecurityConfig  = "org.springframework.security:spring-security-config:${springSecurityVersion}"
def springSecurityWeb     = "org.springframework.security:spring-security-web:${springSecurityVersion}"
def springSecurityTaglibs = "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
def springSecurityACL     = "org.springframework.security:spring-security-acl:${springSecurityVersion}"


// Tiles: 2.2.2, 3.0.5
def tilesVersion = '3.0.5'
def tilesAPI     = "org.apache.tiles:tiles-api:${tilesVersion}"
def tilesCore    = "org.apache.tiles:tiles-core:${tilesVersion}"
def tilesServlet = "org.apache.tiles:tiles-servlet:${tilesVersion}"
def tilesJSP     = "org.apache.tiles:tiles-jsp:${tilesVersion}"
def tilesCompat  = "org.apache.tiles:tiles-compat:${tilesVersion}"


// AspectJ:
def aspectJVersion = '1.6.9'
def aspectJ        = "org.aspectj:aspectjrt:${aspectJVersion}"


// Databases:
def apacheDerbyVersion = '10.9.1.0'
def apacheDerby        = "org.apache.derby:derbyclient:${apacheDerbyVersion}"

def mySQLVersion = '5.1.36'
def mySQL        = "mysql:mysql-connector-java:${mySQLVersion}"

def postgreSQLVersion = '9.1-901.jdbc4'
def postgreSQL        = "postgresql:postgresql:${postgreSQLVersion}"


// Logging:
def slf4jVersion = '1.7.12'
def slf4jAPI     = "org.slf4j:slf4j-api:${slf4jVersion}"
def slf4jJCL     = "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
def slf4jLog4J   = "org.slf4j:slf4j-log4j12:${slf4jVersion}"

def log4JVersion = '2.3'
def log4JAPI     = "org.apache.logging.log4j:log4j-api:${log4JVersion}"
def log4JCore    = "org.apache.logging.log4j:log4j-core:${log4JVersion}"

// Javax:
def javaxServletAPIVersion = '3.1.0'
def javaxServletAPI        = "javax.servlet:javax.servlet-api:${javaxServletAPIVersion}"

def javaxJspApiVersion     = '2.2'
def javaxJspApi            = "javax.servlet.jsp:jsp-api:${javaxJspApiVersion}"

def javaxJSTLVersion       = '1.2'
def javaxJSTL              = "javax.servlet:jstl:${javaxJSTLVersion}"

def javaxInjectVersion     = '1'
def javaxInject            = "javax.inject:javax.inject:${javaxInjectVersion}"

def javaxValidationVersion = '1.1.0.Final'
def javaxValidation        = "javax.validation:validation-api:${javaxValidationVersion}"


// Hibernate:
def hibernateCoreVersion        = '4.3.10.Final'
def hibernateCore               = "org.hibernate:hibernate-core:${hibernateCoreVersion}"

def hibernateValidatorVersion   = '5.1.3.Final'//error in '4.3.2.Final'
def hibernateValidator          = "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"

def hibernateJPAVersion         = '1.0.0.Final'
def hibernateJPA                = "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJPAVersion}"

def hibernateJPAModelgenVersion = '4.3.10.Final'
def hibernateJPAModelgen        = "org.hibernate:hibernate-jpamodelgen:1.2.0.Final:${hibernateJPAModelgenVersion}"


// dom4j:
def dom4JVersion = '1.6.1'
def dom4J        = "dom4j:dom4j:${dom4JVersion}"


// antlr:
def antlrVersion = '2.7.7'
def antlr        = "antlr:antlr:${antlrVersion}"


// commons:
def commonsBeanUtilsVersion   = '1.9.2'
def commonsBeanUtils          = "commons-beanutils:commons-beanutils:${commonsBeanUtilsVersion}"

def commonsCollectionsVersion = '3.2.1'
def commonsCollections        = "commons-collections:commons-collections:${commonsCollectionsVersion}"

def commonsDigesterVersion    = '2.1'
def commonsDigester           = "commons-digester:commons-digester:${commonsDigesterVersion}"

def commonsFileUploadVersion  = '1.3.1'
def commonsFileUpload         = "commons-fileupload:commons-fileupload:${commonsFileUploadVersion}"

def commonsIOVersion          = '2.4'
def commonsIO                 = "commons-io:commons-io:${commonsIOVersion}"

def commonsLangVersion        = '2.6'
def commonsLang               = "commons-lang:commons-lang:${commonsLangVersion}"

def commonsLoggingVersion     = '1.2'
def commonsLogging            = "commons-logging:commons-logging:${commonsLoggingVersion}"

//DBCP
def commonsDBCPVersion        = '2.1'
def commonsDBCP               = "org.apache.commons:commons-dbcp2:${commonsDBCPVersion}"

//JUnit4
def jUnitVersion = '4.12'
def jUnit        = "junit:junit:${jUnitVersion}"

//lombok
def lombokVersion = '1.16.4'
def lombok         = "org.projectlombok:lombok:${lombokVersion}"

//JSON
def jacksonCoreVersion = '2.5.4'
def jacksonCore        = "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
def jacksonAnnotations = "com.fasterxml.jackson.core:jackson-annotations:${jacksonCoreVersion}"
def jacksonDatabind    = "com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}"

//
def reflectionsVersion = '0.9.10'
def reflections        = "org.reflections:reflections:${reflectionsVersion}"

def googleGuavaVersion = '18.0'
def googleGuava        = "com.google.guava:guava:${googleGuavaVersion}"


dependencies {
    // Spring Framework:
    compile(springContext) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile(
            springMVC,    springAOP,    springORM,     springJDBC,  springTest
    )

    // Spring Security:
    compile(
            springSecurityCore,    springSecurityLDAP,        springSecurityConfig,
            springSecurityWeb,    springSecurityTaglibs,    springSecurityACL
    )

    // Tiles:
    compile(
            tilesCore, tilesAPI, tilesJSP
    )

    // AspectJ:
    compile(aspectJ)

    // Databases:
    /*compile(
            apacheDerby, mySQL, postgreSQL
    )*/

    // Logging:
    compile(slf4jAPI)
    runtime(
            slf4jJCL, slf4jLog4J
    )
    /*runtime(log4J) {
        exclude group: 'javax.mail',   module: 'mail'
        exclude group: 'javax.jms',    module: 'jms'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
        exclude group: 'com.sun.jmx',  module: 'jmxri'
    }*/

    // Javax:
    compile(
            javaxInject,        javaxValidation,        javaxJSTL
    )
    providedCompile(
            javaxServletAPI,    javaxJspApi, lombok
    )

    // Hibernate:
    compile(
            hibernateCore, hibernateValidator, hibernateJPA
    )

    // dom4j:
    compile(dom4J)

    // antlr:
    compile(antlr)

    // commons:
    compile(
            commonsBeanUtils,     commonsCollections,   commonsDigester,
            commonsFileUpload,    commonsIO,            commonsLang,
            commonsLogging,       commonsDBCP
    )

    //jackson
    compile(
            jacksonCore, jacksonAnnotations, jacksonDatabind
    )

    compile(
            reflections, googleGuava
    )

    // JUnit:
    /*testCompile(
            jUnit
    )*/

    provided(
//        lombok
    )

    jpaMetamodelGen(
            hibernateJPAModelgen
    )

    /*warMap.each {
        deploy project(":$it.key")
    }*/
}

/*ear {
    deploymentDescriptor {
        warMap.each {
            webModule(it.key + '-' + project.version + ".war", it.value)
        }
    }
}*/

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir jpaMetamodelGeneratedDir
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}


task generateJpaMetamodel(type: JavaCompile) {

    def targetDir = file(jpaMetamodelGeneratedDir)
    def compiledDestinationDir = "${buildDir}/tmp/apt-jpa"
    doFirst {
        // 항상 대상 디렉토리를 먼저 비우고 시작해야 한다.
        delete(targetDir)
        targetDir.mkdirs()
    }

    doLast {
        delete(compiledDestinationDir) // UP-TO-DATE 방지
    }

    // -proc:only 는 Annotation Processor로 소스 생성만 한다 컴파일은 하지 않음
    // -s 경로 는 생성된 소스가 들어갈 디렉토리를 뜻한다.
    classpath = configurations.jpaMetamodelGen
    source = sourceSets.main.java
    destinationDir = file(compiledDestinationDir)
    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-s", targetDir.absolutePath,
                    // processor 지정은 안해도 된다. 안하면 모든 어노테이션 프로세서 실행
                    "-processor", "org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor"         ]
    )
}